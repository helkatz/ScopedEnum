{"name":"ScopedEnum","tagline":"initial","body":"# ScopedEnum\r\n###Version\r\n1.0.0\r\n\r\nSCOPED_ENUM declares a enum with the following features\r\n* use toString to get a string literal of the actual enum value\r\n* enum can only be used with full qualified name that allows the declaration of enums\r\n  in the same scope with same enum values\r\n\r\nthe following declaration of the two enums causes an compiler error\r\n```C++\r\nenum e1 {\r\n\tA,\r\n\tB\r\n}\r\nenum e2 {\r\n\tA, // compiler error\r\n\tC\r\n}\r\n```\r\nthe following declaration of the two enums are allowed\r\n```C++\r\nSCOPED_ENUM(e1,\r\n\tA,\r\n\tB\r\n);\r\nSCOPED_ENUM(e2,\r\n\tA,\r\n\tC\r\n);\r\n```\r\nusage simply declare like an native enum\r\n```C++\r\n#include \"ScopedEnum.h\"\r\nSCOPED_ENUM(eTest,\r\n\tA=1,\r\n\tB=3,\r\n\tC=5,\r\n\tD,\r\n\tEValue = 10,\r\n\tFValue\r\n)\r\n\r\neTest e1 = eTest::EValue;\r\nstd::cout << e1.toString();\r\n// prints out EValue(10)\r\nstd::cout << e1;\r\n// prints out 10\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}